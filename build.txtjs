"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const cm = require("./common");
const bi = require("vso-node-api/interfaces/BuildInterfaces");
function run() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let vsts = yield cm.getWebApi();
            let vstsBuild = vsts.getBuildApi();
            cm.banner('Build Samples');
            let project = cm.getProject();
            console.log('project', project);
            // list definitions
            cm.heading('Build Definitions for ' + project);
            let defs = yield vstsBuild.getDefinitions(project);
            console.log('You have ' + defs.length + ' build definition(s)');
            // save off last def to create a new definition below
            let lastDef;
            for (let i = 0; i < defs.length; i++) {
                let defRef = defs[i];
                let def = yield vstsBuild.getDefinition(defRef.id, project);
                lastDef = def;
                let rep = def.repository;
                console.log(defRef.name + ' (' + defRef.id + ') ' + 'repo ' + rep.type);
            }
            // get top 10 successfully completed builds since 2016
            cm.heading('top 10 successfully completed builds for ' + project + 'project');
            let builds = yield vstsBuild.getBuilds(project, null, // definitions: number[] 
            null, // queues: number[]
            null, // buildNumber
            null, //new Date(2016, 1, 1),       // minFinishTime
            null, // maxFinishTime
            null, // requestedFor: string
            bi.BuildReason.All, // reason
            bi.BuildStatus.Completed, bi.BuildResult.Succeeded, null, // tagFilters: string[]
            null, // properties: string[]
            //bi.DefinitionType.Build,
            10 // top: number
            );
            console.log(builds.length + ' builds returned');
            builds.forEach((build) => {
                console.log(build.buildNumber, bi.BuildResult[build.result], 'on', build.finishTime.toDateString());
            });
            // new definition
            if (lastDef && lastDef.build) {
                cm.heading('creating a new definition');
                let newDef = {};
                let newName = "api copy of " + lastDef.name;
                console.log("name", newName);
                newDef.name = newName;
                console.log("repo", lastDef.repository.name);
                newDef.repository = lastDef.repository;
                let steps = [];
                lastDef.build.forEach((step) => {
                    console.log("adding step", step.displayName);
                    steps.push(step);
                });
                newDef.build = steps;
                newDef.comment = "copy of definition from sample";
                newDef.buildNumberFormat = lastDef.buildNumberFormat;
                console.log("project", project);
                newDef.project = lastDef.project;
                console.log("queue", lastDef.queue.name);
                newDef.queue = lastDef.queue;
                console.log("type", lastDef.type);
                newDef.type = lastDef.type;
                console.log("creating");
                let createdDef = yield vstsBuild.createDefinition(newDef, project);
                console.log("created", createdDef.name);
                console.log("reading history");
                let history = yield vstsBuild.getDefinitionRevisions(project, createdDef.id);
                console.log(`last updated ${history[0].changedDate}`);
                let document = [
                    {
                        op: "replace",
                        path: "/key1",
                        value: "/value1"
                    },
                    {
                        op: "replace",
                        path: "/key2",
                        value: "/value2"
                    }
                ];
                console.log("setting properties");
                let updatedProperties = yield vstsBuild.updateDefinitionProperties(null, document, project, createdDef.id);
                console.log(`properties for definition ${createdDef.name}:`);
                for (let key in updatedProperties.value) {
                    console.log(`${key} = ${updatedProperties.value[key].$value}`);
                }
                // delete def
                console.log("deleting", createdDef.name);
                yield vstsBuild.deleteDefinition(createdDef.id, project);
                console.log("deleted");
            }
        }
        catch (err) {
            console.error('Error: ' + err.stack);
        }
    });
}
exports.run = run;
